name: "Deploy AWS"

on:
  pull_request:
    types: [labeled, opened, synchronize]
env:
  RELEASE_REVISION: "pr-${{ github.event.pull_request.number }}-${{ github.event.pull_request.head.sha }}"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: my-cool-application
  EKS_NAME: rails-docker2
jobs:
  deploy:
    if: |
      (github.event.action == 'labeled' && github.event.label.name == ':rocket: deploy') ||
      (github.event.action != 'labeled' && contains(github.event.pull_request.labels.*.name, ':rocket: deploy'))
    runs-on: ubuntu-latest

    steps:
      - name: set STAGE variable in environment for next steps
        run: echo "STAGE=pr-${{ github.event.number }}-${{ env.GITHUB_HEAD_REF_SLUG }}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set Branch Name
        run: echo "BRANCH=${{ github.head_ref || github.ref_name }}" >> $GITHUB_ENV

      - name: Validate Branch Name
        run: |
          if ! [[ ${{ env.BRANCH }} =~ ^[a-z0-9]([-a-z0-9]*[a-z0-9])$ ]]; then
            echo "Invalid value: \"${{ env.BRANCH }}\"";
            echo "label must consist of lower case alphanumeric characters or '-',"
            echo "and must start and end with an alphanumeric character";
            echo "(e.g. 'my-name',  or '123-abc', regex used for validation is '[a-z0-9]([-a-z0-9]*[a-z0-9])?')";
            exit 1
          fi

      - name: create a github deployment
        uses: bobheadxi/deployments@v0.5.2
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ env.STAGE }}
          ref: ${{ github.head_ref }}
          no_override: false
          transient: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker cache layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx

      - name: Set ECR Path
        run: echo "ECR_PATH=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.BRANCH }}_latest" >> $GITHUB_ENV

      - name: Build/Deploy Docker Image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.ECR_PATH }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.21.3' # default is latest stable
        id: install

      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ env.EKS_NAME }} --region ${{ env.AWS_REGION }}

      - name: Create namespace
        run: kubectl create namespace ${{ env.BRANCH }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy image to AWS EKS
        run: |
          kubectl apply -f .kubernetes/qa/aws-auth.yaml --wait=true

          kubectl apply -f .kubernetes/qa/postgres-config.yaml --namespace=${{ env.BRANCH }} --wait=true
          kubectl apply -f .kubernetes/qa/postgres-secret.yaml --namespace=${{ env.BRANCH }} --wait=true
          kubectl apply -f .kubernetes/qa/postgres.yaml --namespace=${{ env.BRANCH }} --wait=true

          kubectl apply -f .kubernetes/qa/redis-config.yaml --namespace=${{ env.BRANCH }} --wait=true
          kubectl apply -f .kubernetes/qa/redis.yaml --namespace=${{ env.BRANCH }} --wait=true

          kubectl apply -f .kubernetes/qa/dynamodb.yaml --namespace=${{ env.BRANCH }} --wait=true

          kubectl apply -f .kubernetes/qa/redis-config.yaml --namespace=${{ env.BRANCH }} --wait=true
          kubectl apply -f .kubernetes/qa/redis.yaml --namespace=${{ env.BRANCH }} --wait=true

          kubectl apply -f .kubernetes/qa/s3.yaml --namespace=${{ env.BRANCH }} --wait=true

      - name: Create Webapp
        run: |
          kubectl apply -f .kubernetes/qa/webapp.yaml --namespace=${{ env.BRANCH }} --wait=true

          # assigns the branch image ecr path
          kubectl set image deployment webapp-deployment webapp=${{ env.ECR_PATH }} --record --namespace=${{ env.BRANCH }}

          # assigns a env variable to force udpate webapp-deployment
          kubectl set env deployment webapp-deployment DEPLOYED_AT=$( date "+%Y-%m-%d_%H:%M:%S" ) --namespace=${{ env.BRANCH }}

      - name: Create Sidekiq
        run: |
          kubectl apply -f .kubernetes/qa/sidekiq.yaml --namespace=${{ env.BRANCH }} --wait=true

          # assigns the branch image ecr path
          kubectl set image deployment sidekiq-deployment sidekiq=${{ env.ECR_PATH }} --record --namespace=${{ env.BRANCH }}

          # assigns a env variable to force udpate sidekiq-deployment
          kubectl set env deployment sidekiq-deployment DEPLOYED_AT=$( date "+%Y-%m-%d_%H:%M:%S" ) --namespace=${{ env.BRANCH }}

      - name: Set DEPLOYMENT_URL
        run: |
          # Make sure DEPLOYMENT_URL is set and timeout after 60 seconds
          timeout=60

          # zero test
          while [ -z "$DEPLOYMENT_URL" ];
          do
            DEPLOYMENT_URL=$(kubectl get services webapp-service --namespace=${{ env.BRANCH }} --output jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV

            ((timeout--))

            if [ "$timeout" == 0 ]; then
              echo "ERROR: Timeout while waiting for DEPLOYMENT_URL"
              exit 1
            fi

            sleep 1;
          done;

      - name: update the github deployment status
        uses: bobheadxi/deployments@v0.5.2
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: http://${{ env.DEPLOYMENT_URL }}

      # - name: Install Set Development URL Dependencies
      #   run: |
      #     cd .github/actions/setDevelopmentUrl && npm install

      # - name: Set Development URL
      #   uses: ./.github/actions/setDevelopmentUrl
      #   with:
      #     owner: ${{ github.repository_owner }}
      #     repo: ${{ github.event.repository.name }}
      #     pr_number: ${{ github.event.number }}
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     branch: ${{ github.head_ref || github.ref_name }} 
      #     ref: ${{ github.head_ref }}
